name: üê≥ SnapMySQL Docker

on:
  push:
    paths:
      - ".github/workflows/**"
      - "src/**"
      - "scripts/**"
      - "Dockerfile"
      - "package*.json"
    branches: [ "main", "dev" ]
    tags: [ "v*" ]
  pull_request:
    paths:
      - ".github/workflows/**"
      - "src/**"
      - "scripts/**"
      - "Dockerfile"
      - "package*.json"
    branches: [ "main", "dev" ]
  workflow_dispatch:
    inputs:
      docker-tag:
        description: "Docker tag (for manual runs)"
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/shaunakv1/snapmysql
  # Deterministic ephemeral tags (not preserved)
  EPH_AMD64: build-${{ github.sha }}-amd64
  EPH_ARM64: build-${{ github.sha }}-arm64

jobs:
  build:
    name: Build (${{ matrix.platform }})
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            eph: build-${{ github.sha }}-amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm   # or ubuntu-22.04-arm for public repos
            eph: build-${{ github.sha }}-arm64
    runs-on: ${{ matrix.runner }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v5

      - name: üèóÔ∏è Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build natively for this arch and push under the ephemeral tag
      - name: üê≥ Build & Push (ephemeral)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.IMAGE }}:${{ matrix.eph }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

  publish:
    name: Publish Multi-Arch Tags
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Compute the final, user-facing tags (unsuffixed)
      - name: üîñ Compute final tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            # main ‚Üí :latest
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            # non-main branch push (not PR) ‚Üí :{branch}-latest
            type=raw,value={{branch}}-latest,enable=${{ github.ref_type == 'branch' && github.ref_name != 'main' && github.event_name != 'pull_request' }}
            # manual override for workflow_dispatch
            type=raw,value=${{ inputs.docker-tag }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.docker-tag != '' }}
            # semver on tag pushes (vX.Y.Z)
            type=semver,pattern={{raw}}
            # PR refs ‚Üí :pr-<num> (remove if you don't want PR images public)
            type=ref,event=pr
            # SHA tag on non-PR builds
            type=sha,prefix={{branch}}-,priority=100,enable=${{ github.event_name != 'pull_request' }}

      - name: üöß Ensure there are tags to publish
        run: |
          if [ -z "${{ steps.meta.outputs.tags }}" ]; then
            echo "No publishable tags for this event; nothing to do." && exit 0
          fi

      # Create the multi-arch manifest from the two ephemeral tags
      - name: üß© Create multi-arch manifests
        env:
          IMAGE: ${{ env.IMAGE }}
          REF_AMD64: ${{ env.IMAGE }}:${{ env.EPH_AMD64 }}
          REF_ARM64: ${{ env.IMAGE }}:${{ env.EPH_ARM64 }}
        run: |
          set -euo pipefail
          echo "Publishing multi-arch manifests:"
          printf "%s\n" "${{ steps.meta.outputs.tags }}"
          echo

          # Optional: verify ephemeral images exist before stitching
          docker buildx imagetools inspect "$REF_AMD64" >/dev/null
          docker buildx imagetools inspect "$REF_ARM64" >/dev/null

          while IFS= read -r FINAL; do
            [ -z "$FINAL" ] && continue
            echo " -> $FINAL"
            docker buildx imagetools create \
              --tag "$FINAL" \
              "$REF_AMD64" \
              "$REF_ARM64"
            docker buildx imagetools inspect "$FINAL" || true
          done <<< "${{ steps.meta.outputs.tags }}"
