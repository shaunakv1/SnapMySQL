name: üê≥ SnapMySQL Docker

on:
  push:
    paths:
      - ".github/workflows/**"
      - "src/**"
      - "scripts/**"
      - "Dockerfile"
      - "package*.json"
    branches: [ "main", "dev" ]
    tags: [ "v*" ]
  pull_request:
    paths:
      - ".github/workflows/**"
      - "src/**"
      - "scripts/**"
      - "Dockerfile"
      - "package*.json"
    branches: [ "main", "dev" ]
  workflow_dispatch:
    inputs:
      docker-tag:
        description: "Docker tag"
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build-docker-image:
    name: Build & Push (${{ matrix.platform }})
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            archsuffix: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm   # or ubuntu-22.04-arm for public repos
            archsuffix: arm64
    runs-on: ${{ matrix.runner }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v5

      # Compute per-arch tags by adding a suffix via 'flavor'
      - name: üîñ Set image tags (per-arch)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/shaunakv1/snapmysql
          flavor: |
            suffix=-${{ matrix.archsuffix }}
          tags: |
            # main ‚Üí :latest
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            # non-main branch push (not PR) ‚Üí :{branch}-latest
            type=raw,value={{branch}}-latest,enable=${{ github.ref_type == 'branch' && github.ref_name != 'main' && github.event_name != 'pull_request' }}
            # manual override for workflow_dispatch
            type=raw,value=${{ inputs.docker-tag }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.docker-tag != '' }}
            # semver tags on tag pushes like v1.2.3
            type=semver,pattern={{raw}}
            # PR refs ‚Üí :pr-<num>
            type=ref,event=pr
            # always add SHA tag on non-PR builds for traceability
            type=sha,prefix={{branch}}-,priority=100,enable=${{ github.event_name != 'pull_request' }}

      - name: üîé Show computed per-arch tags
        run: |
          echo "ARCH TAGS (should include -${{ matrix.archsuffix }}):"
          printf "%s\n" "${{ steps.meta.outputs.tags }}"

      - name: üöß Ensure per-arch tags are not empty
        run: |
          if [ -z "${{ steps.meta.outputs.tags }}" ]; then
            echo "ERROR: No tags were generated for this event/branch." >&2
            echo "Hint: Push to 'main', push a tag like v1.2.3, open a PR, or pass inputs.docker-tag on workflow_dispatch." >&2
            exit 1
          fi

      - name: üèóÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Build and Push (per-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}              # native arch only
          tags: ${{ steps.meta.outputs.tags }}           # already suffixed by flavor
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

  publish-manifest:
    name: Create Multi-Arch Manifests
    runs-on: ubuntu-latest
    needs: [build-docker-image]

    steps:
      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Compute the *base* tags (no suffix) for this event
      - name: ‚ôªÔ∏è Compute base tags (unsuffixed)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/shaunakv1/snapmysql
          tags: |
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value={{branch}}-latest,enable=${{ github.ref_type == 'branch' && github.ref_name != 'main' && github.event_name != 'pull_request' }}
            type=raw,value=${{ inputs.docker-tag }},enable=${{ github.event_name == 'workflow_dispatch' && inputs.docker-tag != '' }}
            type=semver,pattern={{raw}}
            type=ref,event=pr
            type=sha,prefix={{branch}}-,priority=100,enable=${{ github.event_name != 'pull_request' }}

      - name: üîé Show base tags
        run: |
          echo "BASE TAGS (unsuffixed):"
          printf "%s\n" "${{ steps.meta.outputs.tags }}"

      - name: üß© Create multi-arch manifests
        shell: bash
        run: |
          set -euo pipefail
          BASE_TAGS="${{ steps.meta.outputs.tags }}"
          if [ -z "$BASE_TAGS" ]; then
            echo "No base tags to publish; nothing to do."
            exit 0
          fi

          # We expect these two suffixed images from the build matrix:
          ARCHES=("amd64" "arm64")

          echo "Publishing multi-arch manifests..."
          echo

          while IFS= read -r BASE; do
            [ -z "$BASE" ] && continue

            # Build ref list for the manifest (skip any missing)
            REFS=()
            for A in "${ARCHES[@]}"; do
              REF="${BASE}-${A}"
              # Verify existence to avoid hard failures if one arch is missing
              if docker buildx imagetools inspect "$REF" > /dev/null 2>&1; then
                REFS+=("$REF")
              else
                echo "WARN: Missing $REF ‚Äî will publish manifest with available arches."
              fi
            done

            if [ ${#REFS[@]} -eq 0 ]; then
              echo "Skip $BASE: no arch images found."
              continue
            fi

            echo "Creating manifest for: $BASE"
            echo " -> refs: ${REFS[*]}"
            docker buildx imagetools create --tag "$BASE" "${REFS[@]}"
            docker buildx imagetools inspect "$BASE" || true
            echo
          done <<< "$BASE_TAGS"
