name: üê≥ SnapMySQL Docker

on:
  push:
    paths:
      - "src/**"
      - "scripts/**"
      - "Dockerfile"
      - "package*.json"
    branches: [ "main", "dev" ]
    tags: [ "v*" ]
  pull_request:
    paths:
      - "src/**"
      - "scripts/**"
      - "Dockerfile"
      - "package*.json"
    branches: [ "main", "dev" ]
  workflow_dispatch:
    inputs:
      docker-tag:
        description: "Docker tag"
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build-docker-image:
    name: Build & Push (${{ matrix.platform }})
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            archsuffix: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm   # or ubuntu-22.04-arm (public repos)
            archsuffix: arm64
    runs-on: ${{ matrix.runner }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v5

      - name: üîñ Set image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/shaunakv1/snapmysql
          tags: |
            # main ‚Üí :latest
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            # non-main branch push ‚Üí :{branch}-latest
            type=raw,value={{branch}}-latest,enable=${{ github.ref_name != 'main' && github.event_name != 'pull_request' }}
            # manual override
            type=raw,value=${{ inputs.docker-tag }},enable=${{ inputs.docker-tag != '' }}
            # commit sha tags (not on PRs)
            type=sha,prefix={{branch}}-,priority=100,enable=${{ github.event_name != 'pull_request' }}
            # semver (for pushes to tags like v1.2.3)
            type=semver,pattern={{raw}},priority=900
            # PR refs
            type=ref,event=pr

      - name: üîß Prepare per-arch tag list
        id: tagprep
        run: |
          # Suffix every generated tag with -${{ matrix.archsuffix }}
          echo "suffix=${{ matrix.archsuffix }}" >> $GITHUB_OUTPUT
          echo "arch_tags<<EOF" >> $GITHUB_OUTPUT
          echo "${{ steps.meta.outputs.tags }}" | sed -E "s/$/-${{ matrix.archsuffix }}/"
          echo "EOF" >> $GITHUB_OUTPUT
          # We'll also need the base (unsuffixed) tag list later in the manifest job.
          echo "base_tags<<EOF" >> $GITHUB_OUTPUT
          echo "${{ steps.meta.outputs.tags }}"
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üèóÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Build and Push (per-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }} # native arch only
          tags: ${{ steps.tagprep.outputs.arch_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

      # Expose the generated tag lists to downstream jobs
      - name: üì§ Export tags for manifest job
        id: export
        run: |
          {
            echo "arch=${{ matrix.archsuffix }}"
            echo "arch_tags<<EOF"
            echo "${{ steps.tagprep.outputs.arch_tags }}"
            echo "EOF"
            echo "base_tags<<EOF"
            echo "${{ steps.tagprep.outputs.base_tags }}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
    outputs:
      arch: ${{ steps.export.outputs.arch }}
      arch_tags: ${{ steps.export.outputs.arch_tags }}
      base_tags: ${{ steps.export.outputs.base_tags }}

  # Merge per-arch images into multi-arch manifest tags
  publish-manifest:
    name: Create Multi-Arch Manifests
    runs-on: ubuntu-latest
    needs: [build-docker-image]

    steps:
      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚ôªÔ∏è Recompute base tags (same rules as build jobs)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/shaunakv1/snapmysql
          tags: |
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value={{branch}}-latest,enable=${{ github.ref_name != 'main' && github.event_name != 'pull_request' }}
            type=raw,value=${{ inputs.docker-tag }},enable=${{ inputs.docker-tag != '' }}
            type=sha,prefix={{branch}}-,priority=100,enable=${{ github.event_name != 'pull_request' }}
            type=semver,pattern={{raw}},priority=900
            type=ref,event=pr

      - name: üß© Create multi-arch manifests
        run: |
          set -euo pipefail
          BASE_TAGS="${{ steps.meta.outputs.tags }}"

          # We know our two arches from the build matrix:
          ARCHES=("amd64" "arm64")

          echo "Base tags to publish as multi-arch:"
          echo "$BASE_TAGS"
          echo

          # For each base tag, create a manifest that points to both arch-suffixed images
          while IFS= read -r TAG; do
            [ -z "$TAG" ] && continue
            echo "Publishing manifest for: $TAG"
            # Build a list of referenced images like ghcr.io/...:tag-amd64 ghcr.io/...:tag-arm64
            REFS=()
            for A in "${ARCHES[@]}"; do
              REFS+=("${TAG}-${A}")
            done
            echo " -> refs: ${REFS[*]}"
            docker buildx imagetools create --tag "$TAG" "${REFS[@]}"
          done <<< "$BASE_TAGS"
